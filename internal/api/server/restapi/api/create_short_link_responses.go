// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Maksim646/ozon_shortner/internal/api/definition"
)

// CreateShortLinkOKCode is the HTTP code returned for type CreateShortLinkOK
const CreateShortLinkOKCode int = 200

/*
CreateShortLinkOK Create Short Link Response

swagger:response createShortLinkOK
*/
type CreateShortLinkOK struct {

	/*
	  In: Body
	*/
	Payload *models.ShortLink `json:"body,omitempty"`
}

// NewCreateShortLinkOK creates CreateShortLinkOK with default headers values
func NewCreateShortLinkOK() *CreateShortLinkOK {

	return &CreateShortLinkOK{}
}

// WithPayload adds the payload to the create short link o k response
func (o *CreateShortLinkOK) WithPayload(payload *models.ShortLink) *CreateShortLinkOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create short link o k response
func (o *CreateShortLinkOK) SetPayload(payload *models.ShortLink) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateShortLinkOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateShortLinkBadRequestCode is the HTTP code returned for type CreateShortLinkBadRequest
const CreateShortLinkBadRequestCode int = 400

/*
CreateShortLinkBadRequest Bad request

swagger:response createShortLinkBadRequest
*/
type CreateShortLinkBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateShortLinkBadRequest creates CreateShortLinkBadRequest with default headers values
func NewCreateShortLinkBadRequest() *CreateShortLinkBadRequest {

	return &CreateShortLinkBadRequest{}
}

// WithPayload adds the payload to the create short link bad request response
func (o *CreateShortLinkBadRequest) WithPayload(payload *models.Error) *CreateShortLinkBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create short link bad request response
func (o *CreateShortLinkBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateShortLinkBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateShortLinkInternalServerErrorCode is the HTTP code returned for type CreateShortLinkInternalServerError
const CreateShortLinkInternalServerErrorCode int = 500

/*
CreateShortLinkInternalServerError Internal server error

swagger:response createShortLinkInternalServerError
*/
type CreateShortLinkInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateShortLinkInternalServerError creates CreateShortLinkInternalServerError with default headers values
func NewCreateShortLinkInternalServerError() *CreateShortLinkInternalServerError {

	return &CreateShortLinkInternalServerError{}
}

// WithPayload adds the payload to the create short link internal server error response
func (o *CreateShortLinkInternalServerError) WithPayload(payload *models.Error) *CreateShortLinkInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create short link internal server error response
func (o *CreateShortLinkInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateShortLinkInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
